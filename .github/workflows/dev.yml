# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Dev - Build and deploy

on:
  push:
    branches:
      - dev

env:
  ARTIFACT_NAME: 'dev-michaelouellette' # set this to the name you want for the artifact
  WEBAPP_PACKAGE_PATH: './dist/'      # set this to the path to your web app project
  NODE_VERSION: '14.15.x'                # set this to the node version to use

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up Node.js version
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Cache Node Modules
      id: npm-cache
      uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: mononode-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: NPM Install
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: Build App
      run: |
        npm install -g @angular/cli
        ng build
        ng run app:server
        npx angular-prerender
    - name: Archive Develop Artifact
      uses: actions/upload-artifact@master
      with:
        name:  ${{ env.ARTIFACT_NAME }}-${{ github.sha }}
        path: ${{ env.WEBAPP_PACKAGE_PATH }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@master
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ github.sha }}
      - name: Initialize Google Cloud SDK
        uses: zxyle/publish-gae-action@master
        with:
            service_account_email: ${{ secrets.GCP_SA_EMAIL }}
            service_account_key: ${{ secrets.GCP_SA_KEY }}
            project_id: ${{ secrets.PROJECT_ID }}
            # An optional variables parameter can be used
            gae_variables: ${{ secrets.GAE_VARIABLES }}
      - name: Display structure of downloaded files
        run: |
            # Output artifact contents.
            ls -R
